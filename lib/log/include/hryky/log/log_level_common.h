/**
  @file         log_level_common.h
  @brief        common defintions for hryky::log::level.
  @author       HRYKY
  @version      $Id: log_level_common.h 337 2014-03-23 14:12:33Z hryky.private@gmail.com $
 */
#ifndef LOG_LEVEL_COMMON_H_20130203003716692
#define LOG_LEVEL_COMMON_H_20130203003716692
#include "hryky/kind.h"
#include "hryky/literal_string.h"
//------------------------------------------------------------------------------
// defines macros
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
// declares types
//------------------------------------------------------------------------------
namespace hryky
{
namespace log
{
namespace level
{
	/// raw value of the log level.
	struct Kind
	{
		enum Raw
		{
			/**
			   messages of debug level is logged during only developing.
			 */
			debug,
			/**
			   This kind of message represents somewhat intended for internal
			  use. These messages include technical informations for
			  developers. The difference with debug message is that this kind
			  of message will be logged at release version.
	
			  This kind of message may be logged when
			  - the window was created successfully with specific resolution.
			  - the system will be shut down.
			 */
			info,
			/**
			   This kind of message represents important notification for
			  users. These message is not error, but the system wants users
			  to confirm them. Sometimes, these important messages is useful
			  to resolve the warnings and errors.
	
			  This kind of message may be logged when
			  - an optional feature is enabled.
			  - the resources generated by user was written out successfully.
			 */
			notice,
			/**
			   This kind of message means that the system detected a
			  undesirable state. The system can take the alternative way.
			  Although user is able to ignore this warnings at the moment,
			  
			  This kind of message may be logged when
			  - the system detected the usage of obsolete feature, format
			    and protocol.
			  - the response of network connection is not completed in
			    expected time.
			 */
			warning,
			/**
			   This implies that undesirable situation occurred. This type
			  of error does not mean to stop the process of the system. The
			  system will continue typically. But, after the error, the other
			  critical situation might be invoked.
			  
			  This kind of message may be logged when
			  - an optional file can not be opened.
			  - a resource generated by user is invalid.
			  - network connection was disconnected abnormally.
			 */
			err,
			/**
			   This means that the system has detected the error, and no
			  longer the system proceeds normally after the error. The system
			  will shut down soon. But in comparison to more serious errors,
			  the system is likely to shut down properly.
	
			  This kind of message may be logged when
			  - a file can not be opened owing to the error of filesystem.
			  - The neccessary module can not be initialized because user's
			    platform does not support the module.
			  - The resource generated by users is falsified or corrupt, and
			    the system should shut down as early as possible.
			 */
			crit,
			/**
			   This means that the system detected critical error. The system
			  will try to avoid the failure, or expects that the user removes
			  the cause of the error.
			   If the error can not be resolved, the system will try to
			  terminate itself. During the shutdown of the system, An abnormal
			  termination might occur.
	
			  This kind of message may be logged when
			  - some resource can not be allocated due to memory shortage.
			  - The system detected that the resource was corrupt because of
			    memory corruption or filesystem error.
			 */
			alert,
			/**
			   This means that this system will terminated soon unexpectedly.
			   If this error occurred, the system will almost certainly go
			  into abnormal termination.
	
			  This kind of message may be logged when
			  - The API of OS failed and then the system can not progress.
			  - some variables in stackframe or memory pool are corrupt.
			 */
			emerg,
	
			/// the number of the kinds of level.
			num,
		};
	};

	extern LiteralString<> const g_tokens[Kind::num];

	typedef hryky::Kind<
		Kind, Kind::debug, Kind::num, LiteralString<>, g_tokens> kind_type;
	
} // namespace level
} // namespace log
} // namespace hryky
//------------------------------------------------------------------------------
// struct declaration
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
// declares classes
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
// declares global functions
//------------------------------------------------------------------------------
namespace hryky
{
namespace log
{
namespace level
{
} // namespace level
} // namespace log
} // namespace hryky
//------------------------------------------------------------------------------
// defines global functions
//------------------------------------------------------------------------------
#endif // LOG_LEVEL_COMMON_H_20130203003716692
// end of file
