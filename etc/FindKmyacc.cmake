#-------------------------------------------------------------------------------
# brief :
#   finds kmyacc
# version :
#   $Id$
#
# outputs the following variables
#   {path}      KMYACC_EXECUTABLE is the path to Kmyacc executable.
#   {path}      KMYACC_<lang>_PARSER is the path to template files for each 
#               programming language. <lang> supports c,java,js and pl.
#   {function}  KMYACC_COMMAND is the function which appends custom command to
#               parse a Kmyacc file.
#-------------------------------------------------------------------------------

if (NOT KMYACC_EXECUTABLE)
	
	find_program(
		KMYACC_EXECUTABLE
		NAMES kmyacc kmyacc/bin/kmyacc
		DOC "The executable of kmyacc."
		)
	
		
	if (KMYACC_EXECUTABLE STREQUAL KMYACC_EXECUTABLE-NOTFOUND)
		message(wARNING "kmyacc is not found.")
		return()
	endif()
	
	message(STATUS "kmyacc is found.")

	foreach(lang c java js pl)
		find_file(
			KMYACC_${lang}_PARSER
			kmyacc.${lang}.parser kmyacc/lib/kmyacc.${lang}.parser
			DOC "The parser of kmyacc for " ${lang}
			HINTS ENV ProgramW6432 ProgramFiles)
		message(STATUS "KMYACC_${lang}_PARSER : ${KMYACC_${lang}_PARSER}")
	endforeach()

endif()


#-------------------------------------------------------------------------------
# appends the rule to parse a grammar by Kmyacc.
# The parameters are:
#   {path}      SRC_PATH is the grammar file.
#   {path}      DEST_DIR is the output directory.
#   {path}      PARSER is the language template.
#   {string}    PREFIX is the identifier appended to the beginnging of the
#               symbols in the sources generated by Kmyacc.
#   {string}    OPTION is the arbitrary flags for kmyacc executable.
#-------------------------------------------------------------------------------
function(KMYACC_COMMAND SRC_PATH DEST_DIR PARSER PREFIX OPTION)
	if (NOT EXISTS ${PARSER})
		message(FATAL_ERROR "kmyacc parser, ${PARSER} is not found.")
		return()
	endif()
	get_filename_component(SRC_NAME ${SRC_PATH} NAME)
	get_filename_component(SRC_NAME_WE ${SRC_PATH} NAME_WE)
	get_filename_component(SRC_EXT ${SRC_PATH} EXT)
	set(DEST_PATH_BASE ${DEST_DIR}/${SRC_NAME_WE})
	if (.y STREQUAL ${SRC_EXT})
		set(DEST_EXT .tab.c)
	elseif (.cpy STREQUAL ${SRC_EXT})
		set(DEST_EXT .tab.c)
	elseif (.jy STREQUAL ${SRC_EXT})
		set(DEST_EXT .java)
	elseif (.jsy STREQUAL ${SRC_EXT})
		set(DEST_EXT .js)
	elseif (.ply STREQUAL ${SRC_EXT})
		set(DEST_EXT .pl)
	else()
		get_filename_component(DEST_EXT ${PARSER} EXT)
	endif()
	if (PREFIX)
		set(PREFIX_FLAG -p ${PREFIX})
	endif()
	
	message (STATUS "kmyacc dest : " ${DEST_PATH_BASE}${DEST_EXT})
	
	add_custom_command(
		OUTPUT
			${DEST_PATH_BASE}${DEST_EXT}
			${DEST_PATH_BASE}.output
		COMMAND
			${KMYACC_EXECUTABLE}
		ARGS
			-dv
			${OPTION}
			-b ${DEST_PATH_BASE}
			${PREFIX_FLAG}
			-m ${PARSER}
			${SRC_PATH}
		DEPENDS
			${KMYACC_EXECUTABLE}
			${SRC_PATH}
			${PARSER}
		COMMENT "Generates the parser from grammer by kmyacc."
		vERBATIM
		)
	message(
		STATUS
		"add kmyacc command : " ${DEST_PATH_BASE}${DEST_EXT})
endfunction()

set(KMYACC_COMMAND ${KMYACC_COMMAND} PARENT_SCOPE)
